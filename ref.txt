Why use Webpack?
- Webpack is build tool for single page app.
- Working on small many files and build to large file for publish.
- Performance loading many files

=> Merge all small many files to bundle file.

*** js_modules
    npm init -> create package.json
    create sum.js and index.js
    npm install --save-dev webpack@2.2.0-rc.0 -> install webpack
    create webpack.config.js
    
    run: 
        webpack
        npm run build (check scripts in package.json)
        
    Watchmode:
        webpack --watch
        
        or:        
            module.exports = {
              entry: "./app.js",
              output: {
                filename: "bundle.js"
              },
              watch: true
            }

    Introduction to Loaders:
        Module loaders are used to do some preprocessing on files before they are added to our bundle.js file
        Loaders are commonly used to implement transpiling for ES2015 code, so like the use Babel if you ever worked with or heard of Babel before

        Babel is used for transpiling JavaScript ES2015 to ES5 code, Babel has support for many different build systems
        3 Modules: 
            babel-loader: Teaches babel how to work with webpack 
            babel-core: Knows how to take in code, parse it, and generate some output files
            babel-preset-env: Ruleset for telling babel exactly what pieces of ES2015/6/7 syntax to look for and how to turn it into ES5 code

        Install Babel: npm install --save-dev babel-loader babel-core babel-preset-env

        css-loader: Knows how to deal with CSS imports
        style-loader: Takes CSS imports and adds them to the HTML document
        npm install --save-dev style-loader css-loader

        npm install --save-dev extract-text-webpack-plugin@2.0.0-beta.4


    Handling Images with Webpack: 
        npm install --save-dev image-webpack-loader url-loader

*** WebpackProject: https://github.com/StephenGrider/WebpackProject
    npm install

    Setting Babel & Minimum Webpack Config:
        webpack.config.js
            module: { // Webpack 2, loaders -> Webpack 2
                rules: [
                    {
                        use: 'babel-loader',
                        test: /\.js$/,
                        exclude: /node_modules/
                    }
                ]
            }
        
        .babelrc
            {
                "presets": [
                    "babel-preset-env",
                    "react"
                ]
            }